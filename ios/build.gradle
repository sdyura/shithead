buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        // Multi-OS Engine plugin
        // when it is updating you need to run "./gradlew moeUpdateXcodeSettings"
        classpath group: 'org.multi-os-engine', name: 'moe-gradle', version: '1.10.2'
    }
}

// Apply plugins
apply plugin: 'moe'

// Set source and target to Java 8
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// Set maven repository
repositories {
    mavenCentral()
}

// Exclude all files from Gradle's test runner
test { exclude '**' }

// Setup Multi-OS Engine
moe {
    xcode {
        project 'xcode/Shithead.xcodeproj'
        mainTarget 'Shithead'
        testTarget 'Shithead-Test'
    }
}

dependencies {
    implementation project(':client')
    implementation 'org.swingme:swingme-binding-ios:1.0.0'
}

task extractFileFromJar(type: Copy) {
    def jarFile = configurations.runtimeClasspath.find { it.name.contains("swingme-binding-ios") }
    from zipTree(jarFile)
    include "META-INF/moe-lib/proguard.append.cfg"
    eachFile { file ->
        file.path = file.name
    }
    includeEmptyDirs = false
    into projectDir
}

moeMainReleaseProGuard {
    dependsOn(extractFileFromJar)
    appendCfgFile "proguard.append.cfg"
}
moeMainDebugProGuard {
    dependsOn(extractFileFromJar)
    appendCfgFile "proguard.append.cfg"
}
moeTestDebugProGuard {
    dependsOn(extractFileFromJar)
    appendCfgFile "proguard.append.cfg"
}

// copy the 'iosmeimg' folder into the main app resource bundle

// Default excludes are: ("LICENSE", "LICENSE.*", "META-INF/LICENSE", "META-INF/LICENSE.*", "NOTICE", "NOTICE.*", "META-INF/NOTICE", "META-INF/NOTICE.*", "**/.*")
moe.packaging.exclude("META-INF/moe-lib/**")

task copyiOSresources() {
    doLast {
        def subDir = "META-INF/moe-lib/ios-res/"
        configurations.runtimeClasspath.files.each { jar ->
            copy {
                from zipTree(jar)
                include "$subDir/**"
                into("xcode/")
                eachFile { file ->
                    file.path = file.path.replaceFirst("^$subDir", '')
                }
                includeEmptyDirs(false)
            }
        }
    }
}

task updateInfoPlist {
    doLast {
        File infoPlist = file('xcode/Shithead/Info.plist')
        String content = infoPlist.getText('UTF-8')
        content = content.replaceAll(
                '<key>CFBundleShortVersionString</key>(\\s*)<string>.*?</string>',
                "<key>CFBundleShortVersionString</key>\$1<string>${rootProject.ext.versionName}</string>")
        content = content.replaceAll(
                '<key>CFBundleVersion</key>(\\s*)<string>.*?</string>',
                "<key>CFBundleVersion</key>\$1<string>${rootProject.ext.versionCode}</string>")
        infoPlist.write(content, 'UTF-8')
    }
}

moeMainReleaseIphoneosXcodeBuild.dependsOn copyiOSresources, updateInfoPlist
moeMainDebugIphoneosXcodeBuild.dependsOn copyiOSresources, updateInfoPlist
moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyiOSresources, updateInfoPlist
moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyiOSresources, updateInfoPlist

if (System.getenv('PLATFORM_NAME') != null) {
    moeXcodeInternal.dependsOn copyiOSresources, updateInfoPlist
}

